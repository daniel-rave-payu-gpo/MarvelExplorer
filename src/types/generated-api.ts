/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/marvel/moviesPerActor': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get movies per actor
     * @description Returns a list of Marvel movies each actor has appeared in
     */
    get: operations['getMoviesPerActor'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/marvel/actorsWithMultipleCharacters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get actors with multiple characters
     * @description Returns actors who have played more than one Marvel character
     */
    get: operations['getActorsWithMultipleCharacters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/marvel/charactersWithMultipleActors': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get characters with multiple actors
     * @description Returns characters that were played by more than one actor
     */
    get: operations['getCharactersWithMultipleActors'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/marvel/actors': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get actors with filtering and pagination
     * @description Returns actors with optional filtering and pagination
     */
    get: operations['getActors'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/marvel/movies': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get movies with filtering and pagination
     * @description Returns movies with optional filtering and pagination
     */
    get: operations['getMovies'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/marvel/characters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get characters with filtering and pagination
     * @description Returns characters with optional filtering and pagination
     */
    get: operations['getCharacters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/marvel/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get aggregated statistics
     * @description Returns aggregated statistics about movies, actors, and characters
     */
    get: operations['getStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/tmdb-extraction/replace': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Replace all TMDB data
     * @description Replaces all TMDB data in the database
     */
    post: operations['replaceTMDBData'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/system/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get system health
     * @description Returns the health status of the system
     */
    get: operations['getHealth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * @description Response for movies per actor endpoint
     * @example {
     *       "Robert Downey Jr.": [
     *         "Iron Man",
     *         "Iron Man 2",
     *         "The Avengers"
     *       ],
     *       "Chris Evans": [
     *         "Captain America: The First Avenger",
     *         "The Avengers"
     *       ]
     *     }
     */
    MoviesPerActorResponse: {
      [key: string]: string[];
    };
    /**
     * @description Response for actors with multiple characters endpoint
     * @example {
     *       "Actor Name": [
     *         {
     *           "movieName": "Movie 1",
     *           "characterName": "Character A"
     *         },
     *         {
     *           "movieName": "Movie 2",
     *           "characterName": "Character B"
     *         }
     *       ]
     *     }
     */
    ActorsWithMultipleCharactersResponse: {
      [key: string]: components['schemas']['CharacterRole'][];
    };
    /**
     * @description Response for characters with multiple actors endpoint
     * @example {
     *       "Character Name": [
     *         {
     *           "movieName": "Movie 1",
     *           "actorName": "Actor A"
     *         },
     *         {
     *           "movieName": "Movie 2",
     *           "actorName": "Actor B"
     *         }
     *       ]
     *     }
     */
    CharactersWithMultipleActorsResponse: {
      [key: string]: components['schemas']['ActorRole'][];
    };
    ActorsResponse: {
      data?: components['schemas']['Actor'][];
      pagination?: components['schemas']['Pagination'];
    };
    MoviesResponse: {
      data?: components['schemas']['Movie'][];
      pagination?: components['schemas']['Pagination'];
    };
    CharactersResponse: {
      data?: components['schemas']['Character'][];
      pagination?: components['schemas']['Pagination'];
    };
    StatsResponse: {
      movies?: components['schemas']['MovieStats'];
      actors?: components['schemas']['ActorStats'];
      characters?: components['schemas']['CharacterStats'];
    };
    Actor: {
      /** @description Database ID */
      id?: number;
      /** @description Actor name */
      name?: string;
      /** @description TMDB actor ID */
      tmdbId?: number;
      /** @description List of movie titles */
      movies?: string[];
      /** @description List of character names */
      characters?: string[];
    };
    Movie: {
      /** @description Database ID */
      id?: number;
      /** @description Movie title */
      title?: string;
      /** @description TMDB movie ID */
      tmdbId?: number;
      /**
       * Format: date
       * @description Release date (YYYY-MM-DD)
       */
      releaseDate?: string;
      /** @description Movie overview */
      overview?: string;
      /** @description List of actor names */
      actors?: string[];
    };
    Character: {
      /** @description Character name */
      name?: string;
      /** @description Movie title */
      movie?: string;
      /** @description Actor name */
      actor?: string;
      /** @description List of actor names who played this character */
      actors?: string[];
    };
    CharacterRole: {
      /** @description Movie title */
      movieName?: string;
      /** @description Character name */
      characterName?: string;
    };
    ActorRole: {
      /** @description Movie title */
      movieName?: string;
      /** @description Actor name */
      actorName?: string;
    };
    Pagination: {
      /** @description Total number of records */
      total?: number;
      /** @description Number of results per page */
      limit?: number;
      /** @description Number of results skipped */
      offset?: number;
      /** @description Whether there are more results */
      hasMore?: boolean;
    };
    MovieStats: {
      /** @description Total number of movies */
      total?: number;
      /** @description Number of movies by year */
      by_year?: {
        [key: string]: number;
      };
    };
    ActorStats: {
      /** @description Total number of actors */
      total?: number;
      /** @description Number of actors with multiple characters */
      with_multiple_characters?: number;
    };
    CharacterStats: {
      /** @description Total number of characters */
      total?: number;
      /** @description Number of characters with multiple actors */
      with_multiple_actors?: number;
    };
    TMDBExtractionResponse: {
      /** @description Success message */
      message?: string;
      /** @description Number of movies processed */
      moviesProcessed?: number;
      /** @description Number of actors processed */
      actorsProcessed?: number;
      /** @description Number of characters processed */
      charactersProcessed?: number;
    };
    HealthResponse: {
      /** @enum {string} */
      status?: 'healthy' | 'unhealthy';
      /** Format: date-time */
      timestamp?: string;
      version?: string;
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Error message */
          message: string;
          /** @description Error code */
          code?: string;
        };
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Error message */
          message: string;
          /** @description Error code */
          code?: string;
        };
      };
    };
    Error: {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getMoviesPerActor: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MoviesPerActorResponse'];
        };
      };
      500: components['responses']['InternalServerError'];
    };
  };
  getActorsWithMultipleCharacters: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ActorsWithMultipleCharactersResponse'];
        };
      };
      500: components['responses']['InternalServerError'];
    };
  };
  getCharactersWithMultipleActors: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharactersWithMultipleActorsResponse'];
        };
      };
      500: components['responses']['InternalServerError'];
    };
  };
  getActors: {
    parameters: {
      query?: {
        /** @description Number of results per page (1-100) */
        limit?: number;
        /** @description Number of results to skip */
        offset?: number;
        /** @description Filter by actor name (partial match, case-insensitive) */
        name?: string;
        /** @description Filter actors by movie title */
        movie?: string;
        /** @description Filter actors who play multiple characters */
        multiple_characters?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ActorsResponse'];
        };
      };
      400: components['responses']['BadRequest'];
      500: components['responses']['InternalServerError'];
    };
  };
  getMovies: {
    parameters: {
      query?: {
        /** @description Number of results per page (1-100) */
        limit?: number;
        /** @description Number of results to skip */
        offset?: number;
        /** @description Filter by movie title (partial match, case-insensitive) */
        title?: string;
        /** @description Filter movies by actor name */
        actor?: string;
        /** @description Filter by specific release year */
        year?: number;
        /** @description Filter by release year from */
        year_from?: number;
        /** @description Filter by release year to */
        year_to?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MoviesResponse'];
        };
      };
      400: components['responses']['BadRequest'];
      500: components['responses']['InternalServerError'];
    };
  };
  getCharacters: {
    parameters: {
      query?: {
        /** @description Number of results per page (1-100) */
        limit?: number;
        /** @description Number of results to skip */
        offset?: number;
        /** @description Filter by character name (partial match, case-insensitive) */
        name?: string;
        /** @description Filter characters by movie title */
        movie?: string;
        /** @description Filter characters by actor name */
        actor?: string;
        /** @description Filter characters played by multiple actors */
        multiple_actors?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CharactersResponse'];
        };
      };
      400: components['responses']['BadRequest'];
      500: components['responses']['InternalServerError'];
    };
  };
  getStats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StatsResponse'];
        };
      };
      500: components['responses']['InternalServerError'];
    };
  };
  replaceTMDBData: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Data replacement successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TMDBExtractionResponse'];
        };
      };
      500: components['responses']['InternalServerError'];
    };
  };
  getHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description System is healthy */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HealthResponse'];
        };
      };
    };
  };
}
